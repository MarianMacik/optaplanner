<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.optaplanner</groupId>
    <artifactId>optaplanner</artifactId>
    <version>7.0.0-SNAPSHOT</version>
  </parent>

  <artifactId>optaplanner-core</artifactId>
  <packaging>bundle</packaging><!-- bundle = jar + OSGi metadata -->

  <name>OptaPlanner core</name>
  <description>
    OptaPlanner solves planning problems.
    This lightweight, embeddable planning engine implements powerful and scalable algorithms
    to optimize business resource scheduling and planning.

    This module contains the planning engine itself.
  </description>
  <url>https://www.optaplanner.org</url>

  <properties>
    <osgi.Bundle-SymbolicName>org.optaplanner.core</osgi.Bundle-SymbolicName>
  </properties>

  <dependencies>
    <!-- Internal dependencies -->
    <dependency>
      <groupId>org.kie</groupId>
      <artifactId>kie-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.kie</groupId>
      <artifactId>kie-internal</artifactId>
    </dependency>
    <dependency>
      <groupId>org.drools</groupId>
      <artifactId>drools-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.drools</groupId>
      <artifactId>drools-compiler</artifactId>
    </dependency>
    <dependency>
      <groupId>org.drools</groupId>
      <artifactId>drools-compiler</artifactId>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>
    <!-- External dependencies -->
    <!-- Common utils -->
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-math3</artifactId>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
    </dependency>
    <!-- Logging -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <scope>test</scope>
    </dependency>
    <!-- Scan for annotated classes (can be excluded if scanAnnotatedClasses isn't used) -->
    <dependency>
      <groupId>org.reflections</groupId>
      <artifactId>reflections</artifactId>
    </dependency>
    <!-- XML -->
    <dependency>
      <groupId>com.thoughtworks.xstream</groupId>
      <artifactId>xstream</artifactId>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <configuration>
          <instructions>
            <Export-Package>
              org.optaplanner.core.*
            </Export-Package>
          </instructions>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.revapi</groupId>
        <artifactId>revapi-maven-plugin</artifactId>
        <version>0.7.0</version>
        <dependencies>
          <dependency>
            <groupId>org.revapi</groupId>
            <artifactId>revapi-java</artifactId>
            <version>0.11.2</version>
          </dependency>
        </dependencies>
        <configuration>
          <oldArtifacts>
            <artifact>${project.groupId}:${project.artifactId}:${version.org.kie.latestFinal.release}</artifact>
          </oldArtifacts>
          <!-- By default revapi will check the oldArtifact against the currently executed build -->
          <analysisConfigurationFiles>
            <configurationFile>
              <path>src/build/revapi-config.json</path>
            </configurationFile>
          </analysisConfigurationFiles>
          <!-- By default, revapi will only fail the build if there are potentially breaking or breaking changes. However, in the report
               we want even non breaking changes to be present. -->
          <reportSeverity>nonBreaking</reportSeverity>
          <failSeverity>potentiallyBreaking</failSeverity>
        </configuration>
        <!-- Running two executions is a workaround to make sure we get a HTML report in case revapi finds
             some incompatible changes. The "check" goal will simply fail the whole build before it could get
             to the report. To make sure we always get a HTML report, the "report" goal needs to be executed
             before the "check" goal.
             Once https://github.com/revapi/revapi/issues/11 is fixed it should be possible to use single execution. -->
        <executions>
          <execution>
            <id>check</id>
            <goals>
              <goal>check</goal>
            </goals>
            <phase>verify</phase>
          </execution>
          <execution>
            <!-- report can be found in ${build.directory}/site/revapi-report.html -->
            <id>report</id>
            <goals>
              <goal>report</goal>
            </goals>
            <phase>package</phase>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>
